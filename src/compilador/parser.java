package compilador;

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 27 14:40:04 COT 2021
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 27 14:40:04 COT 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\005\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\010\000" +
    "\002\004\011\000\002\004\013\000\002\020\004\000\002" +
    "\021\004\000\002\021\003\000\002\005\004\000\002\006" +
    "\004\000\002\006\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\010\004\000" +
    "\002\010\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\003\000\002\013\006\000\002\013\003" +
    "\000\002\014\004\000\002\014\004\000\002\015\003\000" +
    "\002\015\005\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\004\032\005\001\002\000\004\002\151\001" +
    "\002\000\020\011\016\012\013\013\006\016\012\021\011" +
    "\027\015\034\014\001\002\000\004\004\143\001\002\000" +
    "\032\011\016\012\013\013\006\015\uffff\016\012\020\uffff" +
    "\021\011\022\uffff\023\uffff\027\015\033\uffff\034\014\001" +
    "\002\000\004\033\141\001\002\000\004\004\127\001\002" +
    "\000\004\004\072\001\002\000\004\004\054\001\002\000" +
    "\004\027\046\001\002\000\004\007\027\001\002\000\004" +
    "\004\017\001\002\000\004\027\020\001\002\000\006\005" +
    "\023\010\022\001\002\000\032\011\ufffc\012\ufffc\013\ufffc" +
    "\015\ufffc\016\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\027" +
    "\ufffc\033\ufffc\034\ufffc\001\002\000\004\027\020\001\002" +
    "\000\004\006\025\001\002\000\032\011\ufff3\012\ufff3\013" +
    "\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\027\ufff3\033\ufff3\034\ufff3\001\002\000\032\011\ufff1\012" +
    "\ufff1\013\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\027\ufff1\033\ufff1\034\ufff1\001\002\000\032\011" +
    "\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\027\ufff2\033\ufff2\034\ufff2\001\002\000" +
    "\012\024\031\025\032\026\034\027\030\001\002\000\010" +
    "\006\035\030\040\031\037\001\002\000\010\006\035\030" +
    "\040\031\037\001\002\000\010\006\035\030\040\031\037" +
    "\001\002\000\032\011\ufffa\012\ufffa\013\ufffa\015\ufffa\016" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\027\ufffa\033\ufffa" +
    "\034\ufffa\001\002\000\010\006\035\030\040\031\037\001" +
    "\002\000\032\011\uffe4\012\uffe4\013\uffe4\015\uffe4\016\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\027\uffe4\033\uffe4\034" +
    "\uffe4\001\002\000\032\011\uffe7\012\uffe7\013\uffe7\015\uffe7" +
    "\016\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\027\uffe7\033" +
    "\uffe7\034\uffe7\001\002\000\012\024\031\025\032\026\034" +
    "\027\030\001\002\000\012\024\031\025\032\026\034\027" +
    "\030\001\002\000\032\011\uffe6\012\uffe6\013\uffe6\015\uffe6" +
    "\016\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\027\uffe6\033" +
    "\uffe6\034\uffe6\001\002\000\032\011\uffe5\012\uffe5\013\uffe5" +
    "\015\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\027" +
    "\uffe5\033\uffe5\034\uffe5\001\002\000\032\011\uffe8\012\uffe8" +
    "\013\uffe8\015\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\027\uffe8\033\uffe8\034\uffe8\001\002\000\032\011\uffe9" +
    "\012\uffe9\013\uffe9\015\uffe9\016\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\027\uffe9\033\uffe9\034\uffe9\001\002\000\032" +
    "\011\uffea\012\uffea\013\uffea\015\uffea\016\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\027\uffea\033\uffea\034\uffea\001\002" +
    "\000\006\006\051\010\050\001\002\000\032\011\ufffd\012" +
    "\ufffd\013\ufffd\015\ufffd\016\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\027\ufffd\033\ufffd\034\ufffd\001\002\000\004\027" +
    "\046\001\002\000\032\011\ufff4\012\ufff4\013\ufff4\015\ufff4" +
    "\016\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\027\ufff4\033" +
    "\ufff4\034\ufff4\001\002\000\032\011\ufff6\012\ufff6\013\ufff6" +
    "\015\ufff6\016\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\027" +
    "\ufff6\033\ufff6\034\ufff6\001\002\000\032\011\ufff5\012\ufff5" +
    "\013\ufff5\015\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\027\ufff5\033\ufff5\034\ufff5\001\002\000\012\024\056" +
    "\025\057\026\061\027\055\001\002\000\006\005\062\010" +
    "\063\001\002\000\006\005\062\010\063\001\002\000\006" +
    "\005\062\010\063\001\002\000\032\011\ufffb\012\ufffb\013" +
    "\ufffb\015\ufffb\016\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\027\ufffb\033\ufffb\034\ufffb\001\002\000\006\005\062\010" +
    "\063\001\002\000\004\006\066\001\002\000\012\024\056" +
    "\025\057\026\061\027\055\001\002\000\032\011\uffed\012" +
    "\uffed\013\uffed\015\uffed\016\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\027\uffed\033\uffed\034\uffed\001\002\000\032\011" +
    "\uffec\012\uffec\013\uffec\015\uffec\016\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\027\uffec\033\uffec\034\uffec\001\002\000" +
    "\032\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\027\uffeb\033\uffeb\034\uffeb\001" +
    "\002\000\032\011\uffee\012\uffee\013\uffee\015\uffee\016\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\027\uffee\033\uffee\034" +
    "\uffee\001\002\000\032\011\uffef\012\uffef\013\uffef\015\uffef" +
    "\016\uffef\020\uffef\021\uffef\022\uffef\023\uffef\027\uffef\033" +
    "\uffef\034\uffef\001\002\000\032\011\ufff0\012\ufff0\013\ufff0" +
    "\015\ufff0\016\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\027" +
    "\ufff0\033\ufff0\034\ufff0\001\002\000\004\027\073\001\002" +
    "\000\004\007\074\001\002\000\012\024\077\025\100\026" +
    "\101\027\076\001\002\000\004\017\113\001\002\000\010" +
    "\005\102\030\105\031\103\001\002\000\010\005\102\030" +
    "\105\031\103\001\002\000\010\005\102\030\105\031\103" +
    "\001\002\000\010\005\102\030\105\031\103\001\002\000" +
    "\010\014\uffd7\017\uffd7\036\uffd7\001\002\000\012\024\077" +
    "\025\100\026\101\027\076\001\002\000\010\014\uffda\017" +
    "\uffda\036\uffda\001\002\000\012\024\077\025\100\026\101" +
    "\027\076\001\002\000\010\014\uffd9\017\uffd9\036\uffd9\001" +
    "\002\000\010\014\uffd8\017\uffd8\036\uffd8\001\002\000\010" +
    "\014\uffdb\017\uffdb\036\uffdb\001\002\000\010\014\uffdc\017" +
    "\uffdc\036\uffdc\001\002\000\010\014\uffdd\017\uffdd\036\uffdd" +
    "\001\002\000\006\024\115\027\116\001\002\000\020\011" +
    "\016\012\013\013\006\016\012\021\011\027\015\034\014" +
    "\001\002\000\006\035\121\036\120\001\002\000\006\035" +
    "\121\036\120\001\002\000\020\011\uffe1\012\uffe1\013\uffe1" +
    "\016\uffe1\021\uffe1\027\uffe1\034\uffe1\001\002\000\020\011" +
    "\uffdf\012\uffdf\013\uffdf\016\uffdf\021\uffdf\027\uffdf\034\uffdf" +
    "\001\002\000\004\024\122\001\002\000\004\036\123\001" +
    "\002\000\020\011\uffde\012\uffde\013\uffde\016\uffde\021\uffde" +
    "\027\uffde\034\uffde\001\002\000\020\011\uffe0\012\uffe0\013" +
    "\uffe0\016\uffe0\021\uffe0\027\uffe0\034\uffe0\001\002\000\004" +
    "\020\126\001\002\000\032\011\ufff7\012\ufff7\013\ufff7\015" +
    "\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\027\ufff7" +
    "\033\ufff7\034\ufff7\001\002\000\012\024\077\025\100\026" +
    "\101\027\076\001\002\000\004\036\131\001\002\000\020" +
    "\011\016\012\013\013\006\016\012\021\011\027\015\034" +
    "\014\001\002\000\006\022\134\023\135\001\002\000\032" +
    "\011\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\027\ufff9\033\ufff9\034\ufff9\001\002" +
    "\000\004\036\136\001\002\000\032\011\uffe2\012\uffe2\013" +
    "\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\027\uffe2\033\uffe2\034\uffe2\001\002\000\020\011\016\012" +
    "\013\013\006\016\012\021\011\027\015\034\014\001\002" +
    "\000\004\023\140\001\002\000\032\011\uffe3\012\uffe3\013" +
    "\uffe3\015\uffe3\016\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\027\uffe3\033\uffe3\034\uffe3\001\002\000\004\002\001\001" +
    "\002\000\014\015\ufffe\020\ufffe\022\ufffe\023\ufffe\033\ufffe" +
    "\001\002\000\012\024\077\025\100\026\101\027\076\001" +
    "\002\000\004\014\145\001\002\000\004\036\146\001\002" +
    "\000\020\011\016\012\013\013\006\016\012\021\011\027" +
    "\015\034\014\001\002\000\004\015\150\001\002\000\032" +
    "\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\027\ufff8\033\ufff8\034\ufff8\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\007\004\006\001\001\000\002\001\001\000\006" +
    "\003\141\004\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\020\001\001\000\004\006\023\001\001\000\002\001\001" +
    "\000\004\005\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\032" +
    "\001\001\000\004\012\044\001\001\000\004\012\043\001" +
    "\001\000\004\012\042\001\001\000\002\001\001\000\004" +
    "\012\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\041\001\001\000\004\011\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\051\001\001\000\002" +
    "\001\001\000\004\020\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\057\001\001" +
    "\000\004\010\070\001\001\000\004\010\067\001\001\000" +
    "\004\010\066\001\001\000\002\001\001\000\004\010\063" +
    "\001\001\000\002\001\001\000\004\007\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\074\001\001\000\002" +
    "\001\001\000\004\017\111\001\001\000\004\017\110\001" +
    "\001\000\004\017\107\001\001\000\004\017\103\001\001" +
    "\000\002\001\001\000\004\016\106\001\001\000\002\001" +
    "\001\000\004\016\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\113\001\001\000\006\003\124\004\006" +
    "\001\001\000\004\015\123\001\001\000\004\015\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\127\001\001" +
    "\000\002\001\001\000\006\003\131\004\006\001\001\000" +
    "\004\013\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\136\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\146\004\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String errsin="";
    public void syntax_error (Symbol  x){
        errsin+="\nError Sintaxis en posición "+ (x.left+1) + "," + (x.right+1);
        throw new UnsupportedOperationException (errsin);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // M ::= pd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // M ::= log L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // M ::= op L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // L ::= str M 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L ::= floatNum M 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L ::= integer M 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // L ::= var M 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // K ::= step integer colon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // K ::= colon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // J ::= integer K 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // J ::= var K 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // I ::= ei 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // I ::= el colon A ei 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // H ::= pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // H ::= log G 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // H ::= op G 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // G ::= str H 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // G ::= floatNum H 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // G ::= integer H 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // G ::= var H 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // F ::= pd pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // F ::= com E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= str F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= floatNum F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= integer F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= var F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // D ::= pd pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // D ::= com C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // C ::= var D 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // O ::= pc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("O",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // O ::= com N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("O",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // N ::= var O 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // B ::= fr pi var ig L ul J A ef 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // B ::= wh pi L doAction colon A ew 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // B ::= ifCond pi L colon A I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // B ::= var ig G 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // B ::= wt pi E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // B ::= rd pi C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // B ::= tp N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= B A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A ::= B 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= ip A fp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

